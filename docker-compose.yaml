services:
  epr-mcp-server:
    build: .
    container_name: epr-mcp-server
    command: 
    ports:
      - "8000:8000"
    environment:
      - EPR_URL=${EPR_URL:-http://localhost:8042}
      - EPR_TOKEN=${EPR_TOKEN}
      - EPR_DEBUG=${EPR_DEBUG:-false}
      - MCP_HOST=0.0.0.0
      - MCP_PORT=8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 90s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - epr-network

  # Optional: Add a reverse proxy for production deployments
  nginx:
    image: nginx:alpine
    container_name: epr-mcp-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      epr-mcp-server:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - epr-network
    profiles:
      - production

  # Optional: Add Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: epr-mcp-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - epr-network
    profiles:
      - monitoring

  # Optional: Add Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: epr-mcp-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - epr-network
    profiles:
      - monitoring

networks:
  epr-network:
    driver: bridge
    name: epr-mcp-network

volumes:
  prometheus-data:
    name: epr-mcp-prometheus-data
  grafana-data:
    name: epr-mcp-grafana-data